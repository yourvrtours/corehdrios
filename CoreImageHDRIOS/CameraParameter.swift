//
//  CameraParameter.swift
//  CoreImage-HDR
//
//  Created by Philipp Waxweiler on 15.01.18.
//  Copyright Â© 2018 Philipp Waxweiler. All rights reserved.
//
import MetalKit

/* CameraParameter
 Camera Response and weight function which need to be estimated before a HDR image can be generated. You should not generate a HDR with the default function, even if it is an educated guess. After you instanciated an CameraParameter object, pass it to MTKPHDR().estimateResponse() to change it according to the input images of your camera. You will need to estimate the parameters for each camera model you are using. For instance, you have to estimate them for the front camera and for the back camera of your iphone. Once estimated, the response can be reused for all images taken with the specific camera model.
 */
public struct CameraParameter {
    public init(withTrainingWeight: Float, BSplineKnotCount: Int = 16) {
        /* Parameters:
         Training weight    ... a weight > 0. Higher values mean that the initial weight function only uses a narrow band of pixel values far from the saturation.                       Lower values mean that pixel values which are close to the saturation values (black and white pixels) are weighted more heavily. If you have noisy images, you should chose higher values, e.g. 7.0. Also pick a higher number if you do not have many images (like 3 images). If you have 5 or more images which are taken at low ISO and are not noisy, try lower values.
         BSplineKnotCount   ... The estimated response function is not necessarily continuous and needs to be smoothed. The BSpline knot count, which must be a power of two, determines how exact the aproximation will be. If you have a heavily noisy response function, try a lower knot count (8 knots). 16 knots should do the job in most cases though.
         
         Check the unit test "CoreImage_HDRTests" and load your test images there to find the optimal parameters for your purpose. The unit test saves your HDR results as a .png on your desktop.
         */
        guard BSplineKnotCount.isPowerOfTwo() else {
            fatalError("Number of Knots for BSpline interpolation cannot be \(BSplineKnotCount), but must be a power of two.")
        }
        
        self.BSplineKnotCount = BSplineKnotCount
        weightFunction = (0...255).map{ float3( exp(-withTrainingWeight * pow( (Float($0)-127.5)/127.5, 2)) ) }
    }
    
    public let BSplineKnotCount:Int
    public var weightFunction:[float3]
    // start with an educated guess to boost the estimation.
    public var responseFunction:[float3] = [float3(0.0821599, 0.0497866, 0.0606299), float3(0.0852682, 0.0530319, 0.0639626), float3(0.0887104, 0.0566342, 0.0676654), float3(0.0924542, 0.0605684, 0.0717158), float3(0.0964671, 0.0648093, 0.0760914), float3(0.100717, 0.0693316, 0.0807696), float3(0.105171, 0.0741102, 0.085728), float3(0.109797, 0.0791199, 0.0909441), float3(0.114563, 0.0843353, 0.0963954), float3(0.119436, 0.0897315, 0.10206), float3(0.124384, 0.095283, 0.107914), float3(0.129374, 0.100965, 0.113936), float3(0.134374, 0.106752, 0.120104), float3(0.139353, 0.112618, 0.126395), float3(0.144276, 0.118539, 0.132786), float3(0.149112, 0.12449, 0.139255), float3(0.153829, 0.130445, 0.14578), float3(0.158403, 0.136384, 0.152341), float3(0.162847, 0.142312, 0.158932), float3(0.167181, 0.148238, 0.16555), float3(0.171427, 0.15417, 0.172193), float3(0.175605, 0.160119, 0.178858), float3(0.179738, 0.166094, 0.185542), float3(0.183847, 0.172103, 0.192242), float3(0.187952, 0.178157, 0.198955), float3(0.192074, 0.184265, 0.205678), float3(0.196236, 0.190436, 0.212409), float3(0.200458, 0.19668, 0.219144), float3(0.204762, 0.203005, 0.225882), float3(0.209168, 0.209421, 0.232618), float3(0.213698, 0.215938, 0.239351), float3(0.218373, 0.222564, 0.246077), float3(0.223214, 0.22931, 0.252793), float3(0.228237, 0.236181, 0.259498), float3(0.233436, 0.243168, 0.266195), float3(0.238799, 0.250259, 0.272885), float3(0.244315, 0.257442, 0.279574), float3(0.24997, 0.264705, 0.286263), float3(0.255755, 0.272035, 0.292957), float3(0.261656, 0.279421, 0.299658), float3(0.267662, 0.28685, 0.306371), float3(0.273762, 0.29431, 0.313098), float3(0.279944, 0.301789, 0.319844), float3(0.286196, 0.309274, 0.32661), float3(0.292506, 0.316754, 0.3334), float3(0.298862, 0.324216, 0.340219), float3(0.305253, 0.331649, 0.347069), float3(0.311667, 0.339039, 0.353953), float3(0.318093, 0.346375, 0.360876), float3(0.324522, 0.353648, 0.367838), float3(0.330961, 0.360865, 0.374839), float3(0.337423, 0.368035, 0.381875), float3(0.34392, 0.375168, 0.388942), float3(0.350461, 0.382275, 0.396038), float3(0.35706, 0.389366, 0.40316), float3(0.363726, 0.39645, 0.410303), float3(0.370473, 0.403537, 0.417466), float3(0.377312, 0.410638, 0.424645), float3(0.384253, 0.417763, 0.431837), float3(0.391308, 0.424921, 0.439039), float3(0.39849, 0.432122, 0.446247), float3(0.405809, 0.439376, 0.453458), float3(0.413276, 0.446694, 0.46067), float3(0.420904, 0.454086, 0.467878), float3(0.428704, 0.461561, 0.475081), float3(0.436683, 0.469126, 0.482275), float3(0.444832, 0.476779, 0.489462), float3(0.453136, 0.484511, 0.496644), float3(0.461582, 0.492318, 0.503824), float3(0.470155, 0.500192, 0.511003), float3(0.478842, 0.508128, 0.518183), float3(0.487629, 0.516117, 0.525367), float3(0.496502, 0.524155, 0.532557), float3(0.505448, 0.532235, 0.539756), float3(0.514451, 0.540349, 0.546964), float3(0.523499, 0.548492, 0.554185), float3(0.532577, 0.556658, 0.561421), float3(0.541672, 0.564839, 0.568673), float3(0.550769, 0.573029, 0.575945), float3(0.559855, 0.581222, 0.583237), float3(0.568916, 0.589412, 0.590553), float3(0.577938, 0.597592, 0.597894), float3(0.586907, 0.605761, 0.605262), float3(0.59581, 0.61392, 0.612659), float3(0.604632, 0.622069, 0.620084), float3(0.613362, 0.630206, 0.62754), float3(0.621984, 0.638331, 0.635028), float3(0.630485, 0.646445, 0.642548), float3(0.638852, 0.654548, 0.650104), float3(0.647071, 0.662638, 0.657694), float3(0.655128, 0.670716, 0.665322), float3(0.66301, 0.678781, 0.672988), float3(0.670703, 0.686833, 0.680693), float3(0.678193, 0.694873, 0.688438), float3(0.685468, 0.702899, 0.696226), float3(0.692513, 0.710912, 0.704057), float3(0.699314, 0.718911, 0.711932), float3(0.705871, 0.726898, 0.719853), float3(0.712228, 0.734883, 0.727826), float3(0.718445, 0.742879, 0.735856), float3(0.724578, 0.750898, 0.743949), float3(0.730686, 0.758952, 0.752111), float3(0.736826, 0.767053, 0.760347), float3(0.743057, 0.775213, 0.768663), float3(0.749436, 0.783446, 0.777064), float3(0.756022, 0.791763, 0.785557), float3(0.762872, 0.800176, 0.794148), float3(0.770044, 0.808698, 0.802841), float3(0.777596, 0.81734, 0.811643), float3(0.785586, 0.826116, 0.82056), float3(0.794071, 0.835037, 0.829596), float3(0.803111, 0.844116, 0.838759), float3(0.812762, 0.853365, 0.848053), float3(0.823062, 0.86279, 0.857482), float3(0.833964, 0.872373, 0.867042), float3(0.845401, 0.882088, 0.876725), float3(0.857307, 0.89191, 0.886524), float3(0.869614, 0.901816, 0.896433), float3(0.882256, 0.911781, 0.906444), float3(0.895164, 0.921779, 0.916551), float3(0.908273, 0.931786, 0.926746), float3(0.921514, 0.941777, 0.937022), float3(0.934822, 0.951727, 0.947373), float3(0.948128, 0.961612, 0.957791), float3(0.961366, 0.971406, 0.96827), float3(0.974469, 0.981085, 0.978803), float3(0.987369, 0.990625, 0.989382), float3(1.0, 1.0, 1.0), float3(1.01229, 1.00919, 1.01065), float3(1.0242, 1.01817, 1.02133), float3(1.03569, 1.02695, 1.03202), float3(1.04678, 1.03557, 1.04272), float3(1.05747, 1.04404, 1.05341), float3(1.06774, 1.05238, 1.0641), float3(1.07761, 1.06062, 1.07476), float3(1.08706, 1.06877, 1.08538), float3(1.0961, 1.07686, 1.09597), float3(1.10473, 1.08491, 1.10651), float3(1.11295, 1.09295, 1.11698), float3(1.12075, 1.10099, 1.12739), float3(1.12813, 1.10905, 1.13772), float3(1.13509, 1.11717, 1.14795), float3(1.14163, 1.12535, 1.15809), float3(1.14775, 1.13363, 1.16812), float3(1.15345, 1.14201, 1.17803), float3(1.15874, 1.15054, 1.18782), float3(1.16369, 1.15922, 1.19751), float3(1.16837, 1.16809, 1.20714), float3(1.17287, 1.17718, 1.21672), float3(1.17728, 1.18649, 1.22628), float3(1.18166, 1.19607, 1.23586), float3(1.1861, 1.20594, 1.24549), float3(1.19069, 1.21612, 1.25519), float3(1.19549, 1.22664, 1.26499), float3(1.2006, 1.23752, 1.27492), float3(1.2061, 1.24879, 1.28501), float3(1.21206, 1.26047, 1.29529), float3(1.21856, 1.27259, 1.30578), float3(1.22569, 1.28517, 1.31651), float3(1.23352, 1.29825, 1.32752), float3(1.24214, 1.31184, 1.33883), float3(1.25162, 1.32596, 1.35047), float3(1.26197, 1.34063, 1.36242), float3(1.27319, 1.35585, 1.37467), float3(1.28529, 1.37163, 1.3872), float3(1.29828, 1.38796, 1.40001), float3(1.31215, 1.40486, 1.41308), float3(1.32692, 1.42232, 1.42639), float3(1.34258, 1.44036, 1.43993), float3(1.35914, 1.45898, 1.45369), float3(1.37661, 1.47818, 1.46765), float3(1.39498, 1.49797, 1.48179), float3(1.41426, 1.51835, 1.4961), float3(1.43446, 1.53933, 1.51057), float3(1.45558, 1.56091, 1.52518), float3(1.47762, 1.58309, 1.53993), float3(1.50058, 1.60589, 1.55478), float3(1.52445, 1.62929, 1.56973), float3(1.54906, 1.6532, 1.58473), float3(1.57421, 1.67751, 1.59973), float3(1.59972, 1.70212, 1.61468), float3(1.62539, 1.72693, 1.62953), float3(1.65103, 1.75183, 1.64423), float3(1.67645, 1.77671, 1.65873), float3(1.70145, 1.80148, 1.67299), float3(1.72585, 1.82601, 1.68695), float3(1.74946, 1.85022, 1.70056), float3(1.77207, 1.87398, 1.71377), float3(1.7935, 1.89721, 1.72654), float3(1.81356, 1.91979, 1.73881), float3(1.83206, 1.94161, 1.75053), float3(1.84879, 1.96258, 1.76166), float3(1.86358, 1.98259, 1.77214), float3(1.8763, 2.00158, 1.78198), float3(1.88719, 2.01974, 1.79137), float3(1.89653, 2.03729, 1.80056), float3(1.90463, 2.05448, 1.80979), float3(1.91179, 2.07154, 1.81931), float3(1.91831, 2.08869, 1.82937), float3(1.92449, 2.10618, 1.84022), float3(1.93063, 2.12423, 1.85209), float3(1.93703, 2.14308, 1.86524), float3(1.94398, 2.16297, 1.8799), float3(1.9518, 2.18412, 1.89634), float3(1.96078, 2.20678, 1.9148), float3(1.97122, 2.23117, 1.93551), float3(1.98343, 2.25753, 1.95873), float3(1.99769, 2.28609, 1.98471), float3(2.01431, 2.31709, 2.01368), float3(2.03354, 2.35069, 2.04583), float3(2.05539, 2.38687, 2.08107), float3(2.07981, 2.42551, 2.11923), float3(2.10676, 2.46651, 2.16014), float3(2.13619, 2.50976, 2.20364), float3(2.16806, 2.55517, 2.24958), float3(2.20233, 2.60263, 2.29778), float3(2.23895, 2.65203, 2.34809), float3(2.27788, 2.70328, 2.40034), float3(2.31907, 2.75628, 2.45436), float3(2.36248, 2.81091, 2.51), float3(2.40807, 2.86708, 2.56708), float3(2.45578, 2.92467, 2.62546), float3(2.50558, 2.9836, 2.68496), float3(2.55742, 3.04376, 2.74542), float3(2.61126, 3.10504, 2.80668), float3(2.66721, 3.16775, 2.86911), float3(2.726, 3.2339, 2.93523), float3(2.78851, 3.30588, 3.00811), float3(2.85564, 3.38611, 3.0908), float3(2.92826, 3.477, 3.18636), float3(3.00727, 3.58096, 3.29786), float3(3.09355, 3.70038, 3.42835), float3(3.18799, 3.8377, 3.58089), float3(3.29148, 3.9953, 3.75854), float3(3.40489, 4.17561, 3.96437), float3(3.52912, 4.38103, 4.20142), float3(3.66506, 4.61397, 4.47277), float3(3.81359, 4.87684, 4.78146), float3(3.97559, 5.17204, 5.13057), float3(4.15196, 5.502, 5.52314), float3(4.34357, 5.86911, 5.96224), float3(4.55079, 6.27452, 6.44935), float3(4.77186, 6.71427, 6.97959), float3(5.00448, 7.18315, 7.54649), float3(5.24635, 7.67594, 8.14361), float3(5.4952, 8.18742, 8.76448), float3(5.74872, 8.71237, 9.40264), float3(6.00462, 9.24557, 10.0516), float3(6.26061, 9.78181, 10.705), float3(6.5144, 10.3159, 11.3563), float3(6.7637, 10.8425, 11.9991), float3(7.00621, 11.3565, 12.6268), float3(7.23964, 11.8527, 13.2331), float3(7.46171, 12.3258, 13.8114), float3(7.67011, 12.7706, 14.3554), float3(7.86255, 13.182, 14.8586)]
}
